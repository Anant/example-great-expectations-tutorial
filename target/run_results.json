{"results": [{"node": {"raw_sql": "select \n\t*\nfrom {{ ref('npi_small_2019') }}", "database": "demo_db", "schema": "public", "fqn": ["demo_pipeline", "staging", "stg_npi"], "unique_id": "model.demo_pipeline.stg_npi", "package_name": "demo_pipeline", "root_path": "/Users/sam/code/demo_pipeline", "path": "staging/stg_npi.sql", "original_file_path": "models/staging/stg_npi.sql", "name": "stg_npi", "resource_type": "model", "alias": "stg_npi", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["npi_small_2019"]], "sources": [], "depends_on": {"nodes": ["seed.demo_pipeline.npi_small_2019"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/run/demo_pipeline/staging/stg_npi.sql", "compiled": true, "compiled_sql": "select \n\t*\nfrom \"demo_db\".\"public\".\"npi_small_2019\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select \n\t*\nfrom \"demo_db\".\"public\".\"npi_small_2019\"", "wrapped_sql": "None"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.0625920295715332, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-02-04T17:35:37.443286Z", "completed_at": "2020-02-04T17:35:37.453421Z"}, {"name": "execute", "started_at": "2020-02-04T17:35:37.453650Z", "completed_at": "2020-02-04T17:35:37.505169Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select \n\tname as state,\n\tabbreviation as state_abbrev\nfrom {{ ref('abbr-name-list') }}", "database": "demo_db", "schema": "public", "fqn": ["demo_pipeline", "staging", "stg_state_crosswalk"], "unique_id": "model.demo_pipeline.stg_state_crosswalk", "package_name": "demo_pipeline", "root_path": "/Users/sam/code/demo_pipeline", "path": "staging/stg_state_crosswalk.sql", "original_file_path": "models/staging/stg_state_crosswalk.sql", "name": "stg_state_crosswalk", "resource_type": "model", "alias": "stg_state_crosswalk", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["abbr-name-list"]], "sources": [], "depends_on": {"nodes": ["seed.demo_pipeline.abbr-name-list"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/run/demo_pipeline/staging/stg_state_crosswalk.sql", "compiled": true, "compiled_sql": "select \n\tname as state,\n\tabbreviation as state_abbrev\nfrom \"demo_db\".\"public\".\"abbr-name-list\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select \n\tname as state,\n\tabbreviation as state_abbrev\nfrom \"demo_db\".\"public\".\"abbr-name-list\"", "wrapped_sql": "None"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.038474082946777344, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-02-04T17:35:37.628497Z", "completed_at": "2020-02-04T17:35:37.636800Z"}, {"name": "execute", "started_at": "2020-02-04T17:35:37.637100Z", "completed_at": "2020-02-04T17:35:37.666010Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select \n\t*\nfrom {{ ref('HEALTHCARE_PROVIDER_TAXONOMY') }}", "database": "demo_db", "schema": "public", "fqn": ["demo_pipeline", "staging", "stg_taxonomy"], "unique_id": "model.demo_pipeline.stg_taxonomy", "package_name": "demo_pipeline", "root_path": "/Users/sam/code/demo_pipeline", "path": "staging/stg_taxonomy.sql", "original_file_path": "models/staging/stg_taxonomy.sql", "name": "stg_taxonomy", "resource_type": "model", "alias": "stg_taxonomy", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["HEALTHCARE_PROVIDER_TAXONOMY"]], "sources": [], "depends_on": {"nodes": ["seed.demo_pipeline.HEALTHCARE_PROVIDER_TAXONOMY"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/run/demo_pipeline/staging/stg_taxonomy.sql", "compiled": true, "compiled_sql": "select \n\t*\nfrom \"demo_db\".\"public\".\"HEALTHCARE_PROVIDER_TAXONOMY\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select \n\t*\nfrom \"demo_db\".\"public\".\"HEALTHCARE_PROVIDER_TAXONOMY\"", "wrapped_sql": "None"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.04007387161254883, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-02-04T17:35:37.785752Z", "completed_at": "2020-02-04T17:35:37.794479Z"}, {"name": "execute", "started_at": "2020-02-04T17:35:37.794795Z", "completed_at": "2020-02-04T17:35:37.824470Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "database": "demo_db", "schema": "public", "fqn": ["demo_pipeline", "example", "my_first_dbt_model"], "unique_id": "model.demo_pipeline.my_first_dbt_model", "package_name": "demo_pipeline", "root_path": "/Users/sam/code/demo_pipeline", "path": "example/my_first_dbt_model.sql", "original_file_path": "models/example/my_first_dbt_model.sql", "name": "my_first_dbt_model", "resource_type": "model", "alias": "my_first_dbt_model", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "docrefs": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "data_type": null}}, "patch_path": "models/example/schema.yml", "build_path": "target/run/demo_pipeline/example/my_first_dbt_model.sql", "compiled": true, "compiled_sql": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "wrapped_sql": "None"}, "error": null, "status": "SELECT 2", "execution_time": 0.04968667030334473, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-02-04T17:35:37.941211Z", "completed_at": "2020-02-04T17:35:37.952625Z"}, {"name": "execute", "started_at": "2020-02-04T17:35:37.952964Z", "completed_at": "2020-02-04T17:35:37.990025Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select \n\tn.*,\n\tt.provider_taxonomy_description,\n\ts.state as state_name\nfrom {{ ref('stg_npi') }} n\nleft join {{ ref('stg_taxonomy') }} t\n\ton n.taxonomy_code = t.provider_taxonomy_code\nleft join {{ ref('stg_state_crosswalk') }} s\n\ton n.state = s.state_abbrev", "database": "demo_db", "schema": "public", "fqn": ["demo_pipeline", "npi_with_crosswalks"], "unique_id": "model.demo_pipeline.npi_with_crosswalks", "package_name": "demo_pipeline", "root_path": "/Users/sam/code/demo_pipeline", "path": "npi_with_crosswalks.sql", "original_file_path": "models/npi_with_crosswalks.sql", "name": "npi_with_crosswalks", "resource_type": "model", "alias": "npi_with_crosswalks", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["stg_npi"], ["stg_taxonomy"], ["stg_state_crosswalk"]], "sources": [], "depends_on": {"nodes": ["model.demo_pipeline.stg_npi", "model.demo_pipeline.stg_taxonomy", "model.demo_pipeline.stg_state_crosswalk"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/run/demo_pipeline/npi_with_crosswalks.sql", "compiled": true, "compiled_sql": "select \n\tn.*,\n\tt.provider_taxonomy_description,\n\ts.state as state_name\nfrom \"demo_db\".\"public\".\"stg_npi\" n\nleft join \"demo_db\".\"public\".\"stg_taxonomy\" t\n\ton n.taxonomy_code = t.provider_taxonomy_code\nleft join \"demo_db\".\"public\".\"stg_state_crosswalk\" s\n\ton n.state = s.state_abbrev", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select \n\tn.*,\n\tt.provider_taxonomy_description,\n\ts.state as state_name\nfrom \"demo_db\".\"public\".\"stg_npi\" n\nleft join \"demo_db\".\"public\".\"stg_taxonomy\" t\n\ton n.taxonomy_code = t.provider_taxonomy_code\nleft join \"demo_db\".\"public\".\"stg_state_crosswalk\" s\n\ton n.state = s.state_abbrev", "wrapped_sql": "None"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.03939199447631836, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-02-04T17:35:38.106537Z", "completed_at": "2020-02-04T17:35:38.120176Z"}, {"name": "execute", "started_at": "2020-02-04T17:35:38.120531Z", "completed_at": "2020-02-04T17:35:38.145012Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1", "database": "demo_db", "schema": "public", "fqn": ["demo_pipeline", "example", "my_second_dbt_model"], "unique_id": "model.demo_pipeline.my_second_dbt_model", "package_name": "demo_pipeline", "root_path": "/Users/sam/code/demo_pipeline", "path": "example/my_second_dbt_model.sql", "original_file_path": "models/example/my_second_dbt_model.sql", "name": "my_second_dbt_model", "resource_type": "model", "alias": "my_second_dbt_model", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "depends_on": {"nodes": ["model.demo_pipeline.my_first_dbt_model"], "macros": []}, "docrefs": [], "description": "A starter dbt model", "columns": {"id": {"name": "id", "description": "The primary key for this table", "data_type": null}}, "patch_path": "models/example/schema.yml", "build_path": "target/run/demo_pipeline/example/my_second_dbt_model.sql", "compiled": true, "compiled_sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom \"demo_db\".\"public\".\"my_first_dbt_model\"\nwhere id = 1", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Use the `ref` function to select from other models\n\nselect *\nfrom \"demo_db\".\"public\".\"my_first_dbt_model\"\nwhere id = 1", "wrapped_sql": "None"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.03581809997558594, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-02-04T17:35:38.287180Z", "completed_at": "2020-02-04T17:35:38.296172Z"}, {"name": "execute", "started_at": "2020-02-04T17:35:38.296732Z", "completed_at": "2020-02-04T17:35:38.322089Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select \n\tprovider_taxonomy_description,\n\tstate_name,\n\tcount(distinct npi)\nfrom {{ ref('npi_with_crosswalks') }} n\ngroup by 1, 2", "database": "demo_db", "schema": "public", "fqn": ["demo_pipeline", "count_specialties"], "unique_id": "model.demo_pipeline.count_specialties", "package_name": "demo_pipeline", "root_path": "/Users/sam/code/demo_pipeline", "path": "count_specialties.sql", "original_file_path": "models/count_specialties.sql", "name": "count_specialties", "resource_type": "model", "alias": "count_specialties", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["npi_with_crosswalks"]], "sources": [], "depends_on": {"nodes": ["model.demo_pipeline.npi_with_crosswalks"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/run/demo_pipeline/count_specialties.sql", "compiled": true, "compiled_sql": "select \n\tprovider_taxonomy_description,\n\tstate_name,\n\tcount(distinct npi)\nfrom \"demo_db\".\"public\".\"npi_with_crosswalks\" n\ngroup by 1, 2", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select \n\tprovider_taxonomy_description,\n\tstate_name,\n\tcount(distinct npi)\nfrom \"demo_db\".\"public\".\"npi_with_crosswalks\" n\ngroup by 1, 2", "wrapped_sql": "None"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.03476285934448242, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-02-04T17:35:38.450763Z", "completed_at": "2020-02-04T17:35:38.458723Z"}, {"name": "execute", "started_at": "2020-02-04T17:35:38.459001Z", "completed_at": "2020-02-04T17:35:38.484534Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-02-04T17:35:38.687901Z", "elapsed_time": 1.4458520412445068}